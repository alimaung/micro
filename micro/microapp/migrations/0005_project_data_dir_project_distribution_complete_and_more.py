# Generated by Django 5.0.7 on 2025-05-04 00:08

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('microapp', '0004_remove_project_has_source_folder_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='project',
            name='data_dir',
            field=models.CharField(blank=True, max_length=500, null=True),
        ),
        migrations.AddField(
            model_name='project',
            name='distribution_complete',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='project',
            name='documents_with_oversized',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='project',
            name='film_allocation_complete',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='project',
            name='index_path',
            field=models.CharField(blank=True, max_length=500, null=True),
        ),
        migrations.AddField(
            model_name='project',
            name='total_oversized',
            field=models.IntegerField(default=0),
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doc_id', models.CharField(help_text='Document ID (usually numeric, extracted from filename)', max_length=100)),
                ('path', models.CharField(help_text='Full path to the PDF file', max_length=500)),
                ('com_id', models.IntegerField(blank=True, help_text='COM ID from comlist Excel file', null=True)),
                ('pages', models.IntegerField(default=0, help_text='Total number of pages in the document')),
                ('has_oversized', models.BooleanField(default=False, help_text='Whether document contains any oversized pages')),
                ('total_oversized', models.IntegerField(default=0, help_text='Count of oversized pages in the document')),
                ('total_references', models.IntegerField(default=0, help_text='Number of reference sheets for this document')),
                ('is_split', models.BooleanField(default=False, help_text='Whether document is split across film rolls')),
                ('roll_count', models.IntegerField(default=1, help_text='Number of rolls this document spans')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='microapp.project')),
            ],
            options={
                'ordering': ['doc_id'],
                'unique_together': {('project', 'doc_id')},
            },
        ),
        migrations.CreateModel(
            name='DocumentAllocationRequest35mm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pages', models.IntegerField(help_text='Number of pages to allocate')),
                ('start_page', models.IntegerField(help_text='Start page in original document')),
                ('end_page', models.IntegerField(help_text='End page in original document')),
                ('processed', models.BooleanField(default=False, help_text='Whether this request has been processed')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allocation_requests_35mm', to='microapp.document')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='doc_allocation_requests_35mm', to='microapp.project')),
            ],
            options={
                'ordering': ['project', 'document__doc_id', 'start_page'],
            },
        ),
        migrations.CreateModel(
            name='DocumentDimension',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_idx', models.IntegerField(help_text='Page index (0-based)')),
                ('width', models.FloatField(help_text='Page width in points')),
                ('height', models.FloatField(help_text='Page height in points')),
                ('percent_over', models.FloatField(help_text='Percentage by which the page exceeds standard dimensions')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dimensions', to='microapp.document')),
            ],
            options={
                'ordering': ['document', 'page_idx'],
            },
        ),
        migrations.CreateModel(
            name='DocumentRange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_page', models.IntegerField(help_text='Start page number (1-based)')),
                ('end_page', models.IntegerField(help_text='End page number (1-based)')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ranges', to='microapp.document')),
            ],
            options={
                'ordering': ['document', 'start_page'],
            },
        ),
        migrations.CreateModel(
            name='DocumentReferenceInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_split', models.BooleanField(default=False, help_text='Whether document is split across rolls')),
                ('document', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='reference_info', to='microapp.document')),
            ],
        ),
        migrations.CreateModel(
            name='FilmAllocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_rolls_16mm', models.IntegerField(default=0)),
                ('total_pages_16mm', models.IntegerField(default=0)),
                ('total_partial_rolls_16mm', models.IntegerField(default=0)),
                ('total_split_documents_16mm', models.IntegerField(default=0)),
                ('total_rolls_35mm', models.IntegerField(default=0)),
                ('total_pages_35mm', models.IntegerField(default=0)),
                ('total_partial_rolls_35mm', models.IntegerField(default=0)),
                ('total_split_documents_35mm', models.IntegerField(default=0)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='film_allocation_info', to='microapp.project')),
            ],
        ),
        migrations.CreateModel(
            name='RangeReferenceInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('range_start', models.IntegerField(help_text='Start page of range')),
                ('range_end', models.IntegerField(help_text='End page of range')),
                ('position', models.IntegerField(help_text="Position in document's ranges")),
                ('frame_start', models.IntegerField(blank=True, help_text='Starting frame for this range', null=True)),
                ('blip', models.CharField(blank=True, help_text='Blip code for this range', max_length=50, null=True)),
                ('blipend', models.CharField(blank=True, help_text='End blip code for this range', max_length=50, null=True)),
                ('document_reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ranges', to='microapp.documentreferenceinfo')),
            ],
            options={
                'ordering': ['document_reference', 'position'],
            },
        ),
        migrations.CreateModel(
            name='ReferencePage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField(help_text='Position where reference sheet should be inserted')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reference_pages', to='microapp.document')),
            ],
            options={
                'ordering': ['document', 'position'],
            },
        ),
        migrations.CreateModel(
            name='Roll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roll_id', models.PositiveIntegerField(unique=True)),
                ('film_number', models.CharField(blank=True, help_text='Film number assigned to this roll', max_length=50, null=True)),
                ('film_type', models.CharField(choices=[('16mm', '16mm'), ('35mm', '35mm')], help_text='Type of film (16mm or 35mm)', max_length=10)),
                ('capacity', models.IntegerField(help_text='Total capacity of the roll in pages')),
                ('pages_used', models.IntegerField(default=0, help_text='Number of pages used on this roll')),
                ('pages_remaining', models.IntegerField(default=0, help_text='Number of pages remaining on this roll')),
                ('status', models.CharField(default='active', help_text='Status of the roll (active, used, etc.)', max_length=20)),
                ('has_split_documents', models.BooleanField(default=False, help_text='Whether any documents are split across rolls')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('is_partial', models.BooleanField(default=False, help_text='Whether this is a partial roll')),
                ('remaining_capacity', models.IntegerField(default=0, help_text='Remaining capacity when roll becomes partial')),
                ('usable_capacity', models.IntegerField(default=0, help_text='Usable capacity accounting for padding')),
                ('film_number_source', models.CharField(blank=True, help_text='Source of film number (new, temp_roll, active)', max_length=20, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rolls', to='microapp.project')),
            ],
            options={
                'ordering': ['project', 'film_type', 'roll_id'],
            },
        ),
        migrations.AddField(
            model_name='documentreferenceinfo',
            name='roll',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='document_references', to='microapp.roll'),
        ),
        migrations.CreateModel(
            name='RollReferenceInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_new_roll', models.BooleanField(default=True, help_text='Whether this is a new roll or reused')),
                ('last_blipend', models.CharField(blank=True, help_text='Last blipend on this roll', max_length=50, null=True)),
                ('last_frame_position', models.IntegerField(default=1, help_text='Last frame position used on this roll')),
                ('previous_project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rolls_reused_in_other_projects', to='microapp.project')),
                ('roll', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='reference_info', to='microapp.roll')),
            ],
        ),
        migrations.CreateModel(
            name='TempRoll',
            fields=[
                ('temp_roll_id', models.AutoField(primary_key=True, serialize=False)),
                ('film_type', models.CharField(choices=[('16mm', '16mm'), ('35mm', '35mm')], help_text='Type of film (16mm or 35mm)', max_length=10)),
                ('capacity', models.IntegerField(help_text='Total remaining capacity in pages')),
                ('usable_capacity', models.IntegerField(help_text='Usable capacity (after padding)')),
                ('status', models.CharField(default='available', help_text='Status (available, used)', max_length=20)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('source_roll', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='temp_rolls_created', to='microapp.roll')),
                ('used_by_roll', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='temp_rolls_used', to='microapp.roll')),
            ],
            options={
                'ordering': ['-creation_date'],
            },
        ),
        migrations.AddField(
            model_name='roll',
            name='created_temp_roll',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='roll_that_created_this_temp', to='microapp.temproll'),
        ),
        migrations.AddField(
            model_name='roll',
            name='source_temp_roll',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rolls_from_this_temp', to='microapp.temproll'),
        ),
        migrations.CreateModel(
            name='DocumentSegment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pages', models.IntegerField(help_text='Number of pages in this segment')),
                ('start_page', models.IntegerField(help_text='Start page in original document (1-based)')),
                ('end_page', models.IntegerField(help_text='End page in original document (1-based)')),
                ('start_frame', models.IntegerField(help_text='Start frame on film roll (1-based)')),
                ('end_frame', models.IntegerField(help_text='End frame on film roll (1-based)')),
                ('document_index', models.IntegerField(help_text='Position of this document on the roll')),
                ('has_oversized', models.BooleanField(default=False, help_text='Whether this segment contains oversized pages')),
                ('blip', models.CharField(blank=True, help_text='Blip code for start of document', max_length=50, null=True)),
                ('blipend', models.CharField(blank=True, help_text='Blip code for end of document', max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='segments', to='microapp.document')),
                ('roll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='document_segments', to='microapp.roll')),
            ],
            options={
                'ordering': ['roll', 'document_index'],
                'unique_together': {('roll', 'document_index')},
            },
        ),
    ]
